name: Dependency Updates

on:
  schedule:
    # Run every Monday at 8:00 AM UTC
    - cron: '0 8 * * 1'
  workflow_dispatch:
    inputs:
      dependency-type:
        description: 'Type of dependencies to check'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - production
        - development

permissions:
  contents: write
  pull-requests: write

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    name: Check for dependency updates
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check for outdated dependencies
        id: outdated-check
        run: |
          npm outdated --json > outdated.json || echo "{}" > outdated.json
          echo "outdated=$(cat outdated.json | jq -r 'to_entries | length')" >> $GITHUB_OUTPUT
          
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Create update report
        if: steps.outdated-check.outputs.outdated != '0'
        run: |
          echo "Found ${{ steps.outdated-check.outputs.outdated }} outdated dependencies"
          cat outdated.json | jq '.'

  create-pr:
    runs-on: ubuntu-latest
    name: Create update PR if needed
    needs: dependency-check
    if: needs.dependency-check.outputs.outdated != '0' && needs.dependency-check.result == 'success'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install
        
      - name: Update dependencies
        run: |
          npm update
          npm audit fix
          
      - name: Run tests with updates
        run: |
          npm run lint:ci
          npm test
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies to latest versions'
          title: 'Automated Dependency Updates'
          body: |
            This PR updates project dependencies to their latest compatible versions.
            
            ## Changes
            - Updated npm dependencies
            - Applied security fixes
            - All tests passing
            
            ## Next Steps
            - Review changes
            - Merge if tests pass
            - Deploy after verification
          branch: automated-dependency-updates
          delete-branch: true

  notify:
    runs-on: ubuntu-latest
    name: Notification
    needs: [dependency-check, create-pr]
    if: always()
    
    steps:
      - name: Determine notification type
        id: notification
        run: |
          if [ "${{ needs.dependency-check.outputs.outdated }}" == "0" ]; then
            echo "message=All dependencies are up to date" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
          elif [ "${{ needs.create-pr.result }}" == "success" ]; then
            echo "message=Dependency update PR created successfully" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "message=Dependency check completed with issues" >> $GITHUB_OUTPUT
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
      - name: Final status
        run: echo "${{ steps.notification.outputs.message }}"
